// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/MyCompany-sample-sdk/pkg/types"
	"github.com/speakeasy-sdks/MyCompany-sample-sdk/pkg/utils"
	"time"
)

// VatCodeDto - The VAT code DTO contains all properties relevant to VAT codes.
type VatCodeDto struct {
	// Gets the standard vat id the custom vat code is based upon. Relevant only for custom vat codes.
	BaseVatCodeID *int64 `json:"BaseVatCodeId,omitempty"`
	// Gets the vat code. Go use standard SAF-T codes by default. Any custom codes, will have a notation with the letter C first.
	// Codes used specifically for vat compensation, are marked with the letter K first (relevant only if the client uses vat compensation, ie the VatSetting 'useVatCompensation' set true).
	Code *string `json:"Code,omitempty"`
	// Gets the description of the vat code.
	Description *string `json:"Description,omitempty"`
	// Gets the unique identifier of the vat code
	ID *int64 `json:"Id,omitempty"`
	// Gets a value indicating whether this vat code is active
	IsActive *bool `json:"IsActive,omitempty"`
	// Gets a value indicating whether this vat code is custom created. The code will have the letter C in the notation if true.
	IsCustom *bool `json:"IsCustom,omitempty"`
	// Gets the name of the vat code.
	Name *string `json:"Name,omitempty"`
	// Gets the rate of the vat code. This is a value between 0 and 1. 0 representing 0 % vat and 1 representing 100 % vat.
	Rate *float64 `json:"Rate,omitempty"`
	// Gets the date this vat code is active from, inclusive.
	ValidFrom *types.Date `json:"ValidFrom,omitempty"`
	// Gets the date this vat code expires. Inclusive.
	ValidTo *types.Date `json:"ValidTo,omitempty"`
	// Gets or sets the vat basis ratio. Relevant for custom codes in mixed vat conditions (Norwegian: Forholdsmessig fradrag MVA). This is a value between 0 and 1, with 0 representing 0% vat basis ratio and 1 representing 100% vat basis ratio.
	// Example: A net amount of 1000 NOK with 50% vat basis ratio and 25% vat rate, will have the vat amount calculated as: 1000 x 0.5 x 0.25 = 125 NOK
	VatBasisRatio *float64 `json:"VatBasisRatio,omitempty"`
	// Gets the date this vat basis ratio is active from.
	// If no vat basis ratio is set, this date will default to the vat code valid from date.
	VatBasisRatioValidFrom *time.Time `json:"VatBasisRatioValidFrom,omitempty"`
	// Gets a collection of VatBasisRatios for a custom vat code.
	VatBasisRatios []VatBasisRatios `json:"VatBasisRatios,omitempty"`
}

func (v VatCodeDto) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VatCodeDto) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *VatCodeDto) GetBaseVatCodeID() *int64 {
	if o == nil {
		return nil
	}
	return o.BaseVatCodeID
}

func (o *VatCodeDto) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *VatCodeDto) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *VatCodeDto) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *VatCodeDto) GetIsActive() *bool {
	if o == nil {
		return nil
	}
	return o.IsActive
}

func (o *VatCodeDto) GetIsCustom() *bool {
	if o == nil {
		return nil
	}
	return o.IsCustom
}

func (o *VatCodeDto) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *VatCodeDto) GetRate() *float64 {
	if o == nil {
		return nil
	}
	return o.Rate
}

func (o *VatCodeDto) GetValidFrom() *types.Date {
	if o == nil {
		return nil
	}
	return o.ValidFrom
}

func (o *VatCodeDto) GetValidTo() *types.Date {
	if o == nil {
		return nil
	}
	return o.ValidTo
}

func (o *VatCodeDto) GetVatBasisRatio() *float64 {
	if o == nil {
		return nil
	}
	return o.VatBasisRatio
}

func (o *VatCodeDto) GetVatBasisRatioValidFrom() *time.Time {
	if o == nil {
		return nil
	}
	return o.VatBasisRatioValidFrom
}

func (o *VatCodeDto) GetVatBasisRatios() []VatBasisRatios {
	if o == nil {
		return nil
	}
	return o.VatBasisRatios
}
